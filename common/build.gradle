plugins {
    id 'java'
    id 'org.spongepowered.gradle.vanilla' version '0.2.1-SNAPSHOT'
    id 'maven-publish'
}

base {
    archivesName = "${mod_id}-common"
}

minecraft {
    version(minecraft_version)
    if(file("src/main/resources/${mod_id}.accesswidener").exists()){
        accessWideners(file("src/main/resources/${mod_id}.accesswidener"))
    }
}

configurations {
    compileOnly.extendsFrom library
}

dependencies {
    compileOnly "org.spongepowered:mixin:0.8.5"
    implementation "com.google.code.findbugs:jsr305:3.0.2"
    compileOnly "com.mrcrayfish:framework-common:${minecraft_version}-${framework_version}"
    testCompileOnly "com.mrcrayfish:framework-common:${minecraft_version}-${framework_version}"
    compileOnly "mezz.jei:jei-1.20.4-common-api:${jei_version}" // TODO temp until 1.20.5 is available
    testCompileOnly "mezz.jei:jei-1.20.4-common-api:${jei_version}" // TODO temp until 1.20.5 is available
    library "com.electronwill.night-config:core:3.6.6"
    library "com.electronwill.night-config:toml:3.6.6"
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version

            artifact jar
            artifact sourcesJar

            pom.withXml {
                def depsNode = asNode().appendNode('dependencies')
                [this.configurations.library].each {
                    it.allDependencies.each {
                        def depNode = depsNode.appendNode('dependency')
                        depNode.appendNode('groupId', it.group)
                        depNode.appendNode('artifactId', it.name)
                        depNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }

    repositories {
        if (System.getenv("CI")) {
            maven {
                name = "GitHubPackages"
                url = "https://maven.pkg.github.com/MrCrayfish/Maven"
                credentials {
                    username = project.findProperty("gpr.user") ?: System.getenv("GPR_USER")
                    password = project.findProperty("gpr.key") ?: System.getenv("GPR_KEY")
                }
            }
        } else {
            maven {
                url "file://" + System.getenv("LOCAL_MAVEN")
            }
        }
    }
}

signing {
    if (System.getenv("SIGNING_KEY")) {
        def signingKey = System.getenv("SIGNING_KEY")
        def signingPassword = System.getenv("SIGNING_PASSPHRASE")
        useInMemoryPgpKeys(signingKey, signingPassword)
    }
    sign publishing.publications.mavenJava
}